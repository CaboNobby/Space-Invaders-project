class Game {
public:
	Game() :myspaceship(mgd),myenemy(mgd),mycollision(mgd),mygamecontroller(mgd) {
		mgd.pWindow = &window;
	};
	void Run();                                                 //Initialize the program
	void Render();
	void GameMenu();
	void UpdateGameState();
	void GameState();
	void GameInstructions();
	void ScoreTable();
	void Scores();
	void GameOver();
	void Init();

private:
	State state = TITLE_SCREEN;
	sf::RenderWindow window;
	sf::Event event;
	GD mgd;
	GameController mygamecontroller;
	Collision mycollision;
	spaceship myspaceship;
	enemy myenemy;
	sf::Texture bgTexture;
	sf::Text scoreText;
	sf::Text nameText;
	sf::Sprite bgSprite;
	sf::Sprite goSprite;
	sf::Sprite menuSprite;
	sf::Music music;
	string PlayerName[5];
	string PlayerScore[5];
	bool playing = false;
	int scoreArray[5] = {};
	int gap = 0;
	int higherScore = 0;
	char key = GDC::NO_KEY;//current key press 
};
void::Game::Scores() {
	scoreText.setFont(mgd.font);
	nameText.setFont(mgd.font);
	if (mgd.points > higherScore) {
		scoreArray[gap] = mgd.points;
		PlayerName[gap] = mygamecontroller.word;
		higherScore = mgd.points;
		if (gap < 5)
			gap++;
	}
}
void::Game::ScoreTable() {
	int y = 0;
	int MaxName = 0;
	sf::Text tabText;
	if (!mgd.font.loadFromFile("data/fonts/ARCADECLASSIC.ttf"))
		assert(false);
	tabText.setFont(mgd.font);
	tabText.setString("High Score");
	tabText.setScale(1.5f, 1.5f);
	tabText.setPosition(280, 20);
	window.draw(tabText);
	for (int i(4); i > MaxName; i--)
	{
		PlayerScore[i] = std::to_string(scoreArray[i]);
		nameText.setString(PlayerName[i]);
		nameText.setPosition(150, 200 + y);
		scoreText.setString(PlayerScore[i]);
		scoreText.setPosition(400, 200 + y);
		window.draw(nameText);
		window.draw(scoreText);
		y += 20;
	}
}
void::Game::GameOver() {
	sf::Texture bgtxt;
	if (!bgtxt.loadFromFile("data/gameover.png"))
		assert(false);
	goSprite.setTexture(bgtxt);
	window.draw(goSprite);
}
void::Game::Init() {
	if (!bgTexture.loadFromFile("data/titlescreen.png"))
		assert(false);
	menuSprite.setTexture(bgTexture);
	window.draw(menuSprite);
}
void::Game::GameMenu() {
	sf::Text menuText;
	int ypos = 250;
	const int textnumber = 4;
	string text[textnumber] = { "Instructions","Play","Leaderboard" ,"Exit" };
	if (!mgd.font.loadFromFile("data/fonts/ARCADECLASSIC.ttf"))
		assert(false);
	menuText.setFont(mgd.font);
	for (int textdisplayed(0); textdisplayed < textnumber; textdisplayed++) {
		menuText.setString(text[textdisplayed]);
		menuText.setPosition(330, ypos);
		window.draw(menuText);
		ypos += 50;
	}
	sf::Sprite ptrSprite;
	sf::Texture ptrTexture;
	if (!ptrTexture.loadFromFile("data/LargeAlien.png"))
		assert(false);
	ptrSprite.setTexture(ptrTexture);
	ptrSprite.setScale(0.04f, 0.04f);
	ptrSprite.setPosition(280, mgd.ptrypos);
	window.draw(ptrSprite);
}
void::Game::GameInstructions() {
	sf::Texture insTexture;
	sf::Sprite insSprite;
	if (!insTexture.loadFromFile("data/gameinstructions.png"))
		assert(false);
	insSprite.setTexture(insTexture);
	insSprite.setPosition(-250, 0);
	window.draw(insSprite);
}
void::Game::GameState() {
	Render();
	switch (state) {
	case State::GAME_PLAYING:
		myspaceship.Render();
		myenemy.RenderEnemies();
		mygamecontroller.Counter();
		break;
	case State::EXIT:
		window.close();
		break;
	case State::TITLE_SCREEN:
		Init();
		break;
	case State::GAME_OVER:
		GameOver();
		break;
	case State::MAIN_MENU:
		GameMenu();
		break;
	case State ::GAME_INSTRUCTIONS:
		GameInstructions();
		break;
	case State ::LEADER_BOARD:
		ScoreTable();
		break;
	case State::GET_NAME:
		mygamecontroller.AskPlayerName();
		mygamecontroller.getName = true;
		break;
	default:
		assert(false);
	}

}
void::Game::UpdateGameState() {
	mgd.deltatime = mgd.clock.getElapsedTime().asSeconds();
	if (mycollision.capullo == true) {
		state = State::GAME_OVER;
		mycollision.capullo = false;
	}
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape))
		state = State::EXIT;
	switch (state) {

	case State::GAME_PLAYING:
		mygamecontroller.KeyHandler();
		mycollision.Update();
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q)) {
			state = State::MAIN_MENU;
			Scores();
		}
		break;
	case State::EXIT:
		window.close();
		break;
	case State::TITLE_SCREEN:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.deltatime > mgd.rate) {
			state = State::MAIN_MENU;
			mgd.clock.restart();
		}
		break;
	case State::GAME_OVER:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.deltatime > mgd.rate) {
			Scores();
			state = State::MAIN_MENU;
			mgd.clock.restart();
		}
		break;
	case State::MAIN_MENU:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.ptrypos == 300 && mgd.deltatime > mgd.rate) {
			state = State::GET_NAME;
			mgd.ptrypos = 250;
			mgd.clock.restart();
			mygamecontroller.word.clear();
			mgd.charcounter = 0;
		}
		else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.ptrypos == 250 && mgd.deltatime > mgd.rate) {
			state = State::GAME_INSTRUCTIONS;
			mgd.clock.restart();
		}
		else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.ptrypos == 350)
			state = State::LEADER_BOARD;
		else if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.ptrypos == 400)
			state = State::EXIT;
		mygamecontroller.PointerMovement();
		break;
	case State::GAME_INSTRUCTIONS:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q))
			state = State::MAIN_MENU;
		break;
	case State::LEADER_BOARD:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Q))
			state = State::MAIN_MENU;
		break;
	case State::GET_NAME:
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Enter) && mgd.deltatime > mgd.rate) {
			state = State::GAME_PLAYING;
			mgd.charcounter--;
			mgd.points = 0;
			mygamecontroller.getName = false;
		}
		break;
	default:
		assert(false);

	}
}
void Game::Render() {
	int tilesInX = 19;
	int tilesInY = 12;
	float x = 0;
	float y = 0;
	if (!bgTexture.loadFromFile("data/background.png"))
		assert(false);
	bgSprite.setTexture(bgTexture);
	bgSprite.setScale(2, 2);
	for (int tiles(0); tiles < tilesInX; tiles++) {
		for (int ytiles(0); ytiles < tilesInY; ytiles++)
		{
			bgSprite.setPosition(64 * tiles, y);
			window.draw(bgSprite);
			y = y + 64;
		}
		y = 0;
	}
}

void Game::Run() {
	mycollision.Init();
	window.create(sf::VideoMode(GDC::SCREEN_RES.x, GDC::SCREEN_RES.y),"Space Invaders");
	if (!music.openFromFile("data/trial.wav"))
		assert(false);
	while (window.isOpen())
	{
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
			if (event.type == sf::Event::TextEntered)
			mygamecontroller.HandleInput(static_cast<char>(event.text.unicode));
				
		}
		window.clear();
		GameState();
		UpdateGameState();
		window.display();
	}
}
int main()
{
	Game g;
	g.Run();
	return EXIT_SUCCESS;
}
